// Website, a feature to automatically manage webpage deployment, routing, and variable parsing

const Router = require("express").Router;

class WebsiteManager {

    static #dir = process.cwd()?.replace("C:", "").replace(/\\/g, "/") + "/website";
    static static = new Set();

    /**
     * The underlying ExpressJS instance.
     */
    static get app() {
        const ElisifClient = require("../client/Client");
        if (!ElisifClient.express) ElisifClient.express = require('express')();
        return ElisifClient.express;
    }

    /**
     * Creates a new GET endpoint at the specified path, handled by the provided callback.
     * @param {String} path - The path of the endpoint.
     * @param {(req, res) => void} callback - The ExpressJS-style callback function to handle endpoint requests.
     */
    static GET(path, callback) {
        return this.app.get(path, (...args) => callback(...args));
    }

    /**
     * Creates a new POST endpoint at the specified path, handled by the provided callback.
     * @param {String} path - The path of the endpoint.
     * @param {(req, res) => void} callback - The ExpressJS-style callback function to handle endpoint requests.
     */
    static POST(path, callback) {
        return this.app.post(path, (...args) => callback(...args));
    }

    /**
     * Creates a new PUT endpoint at the specified path, handled by the provided callback.
     * @param {String} path - The path of the endpoint.
     * @param {(req, res) => void} callback - The ExpressJS-style callback function to handle endpoint requests.
     */
    static PUT(path, callback) {
        return this.app.put(path, (...args) => callback(...args));
    }

    /**
     * Creates a new DELETE endpoint at the specified path, handled by the provided callback.
     * @param {String} path - The path of the endpoint.
     * @param {(req, res) => void} callback - The ExpressJS-style callback function to handle endpoint requests.
     */
    static DELETE(path, callback) {
        return this.app.delete(path, (...args) => callback(...args));
    }

    /**
     * Enables or defines ExpressJS-compatible middleware.
     * Equivalent to using `app.use()` in ExpressJS.
     * @param {...any} args - The arguments of the middleware to enable or create.
     */
    static middleware(...args) {
        return this.app.use(...args);
    }

    /**
     * Creates a new ExpressJS router, to organize the creation of multiple endpoints with the same parent path.
     * @param {Object} options - Options to pass to the ExpressJS Router constructor.
     * @param {(router: Router) => void} callback - A callback function, to work with the ExpressJS Router instance.
     */
    static router(options, callback) {
        return callback(Router(options));
    }

    /**
     * Sets the working directory of this Elisif WebsiteManager.
     * This method will be called automatically by WebsiteManager.load() if a directory is provided to it.
     * @param {String} dir - The path of the directory to set.
     */
    static setDirectory(dir) {
        this.#dir = dir.replace("C:", "").replace(/\\/g, "/");
    }

    /**
     * An internal method to parse loaded paths into ExpressJS-compatible paths.
     * @param {String} dir - The path to parse.
     * @param {Boolean} isStatic - Whether or not this path is within the static directory.
     * @returns 
     */
    static #parsePath(dir, isStatic) {
        const path = dir.replace(this.#dir + "/", "/");
        return path.replace(/\{([^{}]+)\}/g, ":$1").replace("index.html", "").replace(".html", isStatic ? ".html" : "");
    }

    /**
     * An internal method to handle Elisif's unique HTML features, such as templates, variable parsing, etc.
     * @param {String} dir - The absolute path of the directory that contains the HTML file.
     * @param {String} path - The absolute path to the HTML file.
     * @param {*} req - The ExpressJS Request object.
     * @param {{ params: Object }} custom - Custom properties to use when parsing the HTML file.
     * @returns 
     */
    static #handleHTML(dir, path, req, custom) {
        const customs = ["elisif/jquery", "elisif/templates", "elisif/discord", "elisif/linebreaks"];
        const client = require("../client/Client").instance;

        const htmlWithTemplates = require("fs").readFileSync(path, "utf-8").replace(/<template(.*?)>(.+?)<\/template>/gms, (_, a, m) => {
            if (m.startsWith("/")) m = m.substring(1);
            const match = require("fs").existsSync(dir + "/" + m) ? require("fs").readFileSync(dir + "/" + m, "utf-8") : "";
            return `<div${a} template="elisif-template">${match}</div>`;
        });

        const templateCensor = `<style>/* Auto-generated by Elisif */\n*[template] { display: none; }</style>`

        const htmlWithImports = templateCensor + htmlWithTemplates.replace(/<script>([^<>]+)<\/script>/gm, (g, m) => {
            let matches = [...m.matchAll(/(?<!\S|\/\/[^\n]*?|\/\*[^\n]*?)import "([^<>"]+)"/gm)].map(s => s?.[1]?.trim().toLowerCase());
            if (matches.length) return matches.map(s => `<script src="/static/${customs.includes(s) ? s.replace("elisif/", "") : s + ".js"}"></script>`).join("\n");
            else return g;
        });

        const htmlWithParams = htmlWithImports.replace(/{{([^{}]+)}}/g, (_, m) => {
            return req?.params[m.trim()] ?? req?.query[m.trim()] ?? custom?.params?.[m.trim()] ?? "";
        });

        const htmlWithClientParams = htmlWithParams.replace(/<discord(.*?)>(.+?)<\/discord>/gs, (_, a, m) => {
            let contents = m.replace(/(?<!\S)client(?![^\s.])/g, "this").trim().replace(/\n/g, "");
            if (contents.endsWith(";")) contents = contents.substring(0, contents.length - 1);
            return `<span${a} template="elisif-discord">${client._eval(`(${contents});`)}</span>`;
        });

        const htmlWithIfElements = htmlWithClientParams.replace(/<if name="([^"]+)">(.+?)<\/if>/gs, (_, m, a) => {
            const variable = req?.params[m.trim()] ?? req?.query[m.trim()] ?? custom?.params?.[m.trim()];
            if (variable) return a;
            else return "";
        });

        return htmlWithIfElements;
    }

    /**
     * An internal method to recursively load all files for the website and setup their respective endpoints/routes.
     * @param {String} dir - The absolute path to a directory to parse website files in.
     * @param {*} isStatic - Whether the directory is within the static directory.
     * @param {String[]} [customFiles] - An optional list of String files to load, ignoring the provided directory.
     * @returns A list of all loaded and parsed route paths.
     */
    static #load(dir, isStatic, customFiles) {
        const files = customFiles ?? require("fs").readdirSync(dir);

        return files.map(file => {
            let path = dir + "/" + file;
            if (require("fs").lstatSync(path).isDirectory()) {
                return this.#load(path, this.#parsePath(path).match(/\/static(\/|)/));
            } else if (isStatic && file.match(/\./)) {
                this.GET(this.#parsePath(path, isStatic), (_req, res) => {
                    if (!this.#parsePath(path, isStatic).startsWith("/static/downloads/")) res.sendFile(path);
                    else res.download(path);
                });

                this.static.add(this.#parsePath(path, isStatic));
                return this.#parsePath(path, isStatic);
            }
            else if ((file.endsWith(".html") || file.endsWith(".htm")) && !file.startsWith("404")) {
                this.GET(this.#parsePath(path, isStatic), (req, res) => {
                    const jsFile = path.replace(path.split(".").slice(-1)[0], ".js");
                    if (require("fs").existsSync(jsFile)) {
                        // Developer-defined handling

                        const js = require(jsFile);
                        if (js && typeof js === "function") js(req, res);
                    }
                    else {
                        // Default elisif handling

                        const html = this.#handleHTML(dir, path, req);
                        res.send(html);
                    }
                });

                return this.#parsePath(path, isStatic);
            }

            return null;
        }).flat();
    }

    /**
     * Loads all files in the website directory and initializes the website system.
     * Custom `elisif/*` imports, the `/static` route, and the 404-handling system are enabled by this method.
     * @param {String} [dir] - The optional website directory to load from. If unspecified, the `website` folder in the project root is used. 
     * @param {Boolean} [enableStaticFilelist=true] - Whether to enable the `/static` route that lists all static files. Defaults to true.
     */
    static async load(dir, enableStaticFilelist = true) {
        if (dir) this.setDirectory(dir);
        const paths = this.#load(this.#dir)?.flat();
        console.log(`\n${"-".repeat(26)}\nInitialized website paths:\n- ${paths.filter(p => p).join("\n- ")}\n${"-".repeat(26)}\n`);

        this.GET("/static/jquery", (_req, res) => res.redirect(`https://code.jquery.com/jquery-3.6.0.min.js`));
        this.GET("/static/templates", (_req, res) => res.send(`document.querySelectorAll('*[template="elisif-template"]').forEach(t => t.removeAttribute("template"))`));
        this.GET("/static/discord", (_req, res) => res.send(`document.querySelectorAll('*[template="elisif-discord"]').forEach(t => t.removeAttribute("template"))`));
        this.GET("/static/linebreaks", (_req, res) => res.send(`document.querySelector("main").innerHTML = document.querySelector("main").innerHTML.trim().replace(/\\n/g, "<br>"); document.querySelector("main").setAttribute("style", "position:fixed;top:0;left:0;width:calc(100% - 16px);height:calc(100% - 16px);margin:8px;");`));
        if (enableStaticFilelist) this.GET("/static", (_req, res) => res.send(`
            <h3>Static files</h3>
            <ul>
                ${[...this.static.values()].map(p => `<li><a href="${p}">${p}</a></li>`).join("\n")}
            </ul>

            <h3>Built-in Elisif Static Files</h3>
            These built-in features mostly only work with the Elisif website system.<br>
            They can be imported in HTML script tags using <i style="background:#efefef;">import "elisif/&lt;name&gt;"</i>.<br>
            For example - <i style="background:#efefef;">import "elisif/jquery"</i> - will import Jquery.
            <ul>
                <li><a href="/static/jquery">Jquery - Easily import Elisif-bundled Jquery into your HTML</a></li>
                <li><a href="/static/templates">Templates - Include text-based file content in your HTML</a></li>
                <li><a href="/static/discord">Discord - Easily embed data from your Discord bot in your HTML</a></li>
                <li><a href="/static/linebreaks">Linebreaks - Auto-convert linebreaks into BR elements in your HTML</a></li>
            </ul>
        `));

        const route404 = require("fs").existsSync(this.#dir + "/404.html") ? require("fs").readFileSync(this.#dir + "/404.html") : null;
        if (route404) this.app.use((req, res) => {
            this.render(res.status(404), "/404.html", req);
        });
    }

    /**
     * An alternative to `res.render()` or `res.send()` that renders an HTML file with Elisif's custom features.
     * This includes custom imports, parameter variables, templates, and more.
     * @param {*} res - The ExpressJS Response object.
     * @param {String} path - The local path to the HTML file within the website directory to render (e.g. `index.html` or `page/index.html`).
     * @param {Object} customParams - An object whose properties are parsed into parameter variables. For example, specifying `{ key: "value" }` will result in `{{ key }}` being replaced with `value` in the rendered HTML.
     * @returns 
     */
    static render(res, path, customParams) {
        if (!path.startsWith("/")) path = "/" + path;
        return res.send(this.#handleHTML(this.#dir, this.#dir + path, null, { params: customParams }));
    }

}

module.exports = {
    WebsiteManager
}